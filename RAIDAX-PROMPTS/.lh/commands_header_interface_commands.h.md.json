{
    "sourceFile": "commands_header_interface_commands.h.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751971826719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751971826719,
            "name": "Commit-0",
            "content": "# Language-Agnostic Specification: Commands Header Interface\r\n\r\n## 1. Module Purpose\r\nThis specification defines the complete public interface for all CloudCoin RAIDA command handlers. It establishes the function signatures and data structures required to implement the full command set across 14 command groups, supporting authentication, healing, administrative, filesystem, and specialized operations.\r\n\r\n## 2. Command Function Interface\r\n\r\n### 2.1 Status Commands (Group 0)\r\nBasic system status and diagnostic operations:\r\n\r\n#### 2.1.1 cmd_echo(connection_info)\r\n```\r\nFunction: cmd_echo\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Echo request data back to client for connectivity testing\r\n```\r\n\r\n#### 2.1.2 cmd_version(connection_info)\r\n```\r\nFunction: cmd_version\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Return system version information\r\n```\r\n\r\n#### 2.1.3 cmd_audit(connection_info)\r\n```\r\nFunction: cmd_audit\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Perform system audit and return results\r\n```\r\n\r\n#### 2.1.4 cmd_show_stats(connection_info)\r\n```\r\nFunction: cmd_show_stats\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Return system performance and operation statistics\r\n```\r\n\r\n### 2.2 Authentication Commands (Group 1)\r\nCore coin authentication and ownership operations:\r\n\r\n#### 2.2.1 cmd_detect(connection_info)\r\n```\r\nFunction: cmd_detect\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Validate coin authenticity without ownership transfer\r\n```\r\n\r\n#### 2.2.2 cmd_detect_sum(connection_info)\r\n```\r\nFunction: cmd_detect_sum\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Batch coin validation using XOR checksum\r\n```\r\n\r\n#### 2.2.3 cmd_pown(connection_info)\r\n```\r\nFunction: cmd_pown\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Validate and transfer coin ownership\r\n```\r\n\r\n#### 2.2.4 cmd_pown_sum(connection_info)\r\n```\r\nFunction: cmd_pown_sum\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Batch ownership transfer using XOR-based authentication\r\n```\r\n\r\n### 2.3 Healing Commands (Group 2)\r\nDistributed coin recovery and repair operations:\r\n\r\n#### 2.3.1 cmd_get_ticket(connection_info)\r\n```\r\nFunction: cmd_get_ticket\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Create healing ticket for authenticated coins\r\n```\r\n\r\n#### 2.3.2 cmd_validate_ticket(connection_info)\r\n```\r\nFunction: cmd_validate_ticket\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Validate ticket authenticity and mark RAIDA claims\r\n```\r\n\r\n#### 2.3.3 cmd_find(connection_info)\r\n```\r\nFunction: cmd_find\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Determine coin authentication state (AN vs PAN)\r\n```\r\n\r\n#### 2.3.4 cmd_fix(connection_info)\r\n```\r\nFunction: cmd_fix\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Perform distributed coin recovery using consensus\r\n```\r\n\r\n#### 2.3.5 send_validate_ticket_job(thread_argument)\r\n```\r\nFunction: send_validate_ticket_job\r\nParameters: arg (generic pointer to validate_ticket_arg_structure)\r\nReturns: platform_thread_return_type\r\nPurpose: Thread function for cross-RAIDA ticket validation\r\nThread Context: Executed in separate thread for parallel processing\r\n```\r\n\r\n### 2.4 Executive Commands (Group 3)\r\nAdministrative coin management operations:\r\n\r\n#### 2.4.1 cmd_get_available_sns(connection_info)\r\n```\r\nFunction: cmd_get_available_sns\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Return available serial numbers for coin creation\r\n```\r\n\r\n#### 2.4.2 cmd_create_coins(connection_info)\r\n```\r\nFunction: cmd_create_coins\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Create new coins in the system\r\n```\r\n\r\n#### 2.4.3 cmd_delete_coins(connection_info)\r\n```\r\nFunction: cmd_delete_coins\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Remove coins from the system\r\n```\r\n\r\n#### 2.4.4 cmd_free_coins(connection_info)\r\n```\r\nFunction: cmd_free_coins\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Release coins from reserved state\r\n```\r\n\r\n#### 2.4.5 cmd_get_all_sns(connection_info)\r\n```\r\nFunction: cmd_get_all_sns\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Return all serial numbers in the system\r\n```\r\n\r\n### 2.5 Key Exchange Commands (Group 4)\r\nCryptographic key management operations:\r\n\r\n#### 2.5.1 cmd_encrypt_key(connection_info)\r\n```\r\nFunction: cmd_encrypt_key\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Encrypt key data using system cryptography\r\n```\r\n\r\n#### 2.5.2 cmd_post_key(connection_info)\r\n```\r\nFunction: cmd_post_key\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Store cryptographic key in system\r\n```\r\n\r\n#### 2.5.3 cmd_get_key(connection_info)\r\n```\r\nFunction: cmd_get_key\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Retrieve stored cryptographic key\r\n```\r\n\r\n#### 2.5.4 cmd_key_alert(connection_info)\r\n```\r\nFunction: cmd_key_alert\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Process key-related alert or notification\r\n```\r\n\r\n#### 2.5.5 cmd_decrypt_raida_key(connection_info)\r\n```\r\nFunction: cmd_decrypt_raida_key\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Decrypt RAIDA-specific key data\r\n```\r\n\r\n#### 2.5.6 load_my_enc_coin(denomination, serial_number, output_buffer)\r\n```\r\nFunction: load_my_enc_coin\r\nParameters:\r\n    denomination: unsigned_8bit_integer\r\n    serial_number: unsigned_32bit_integer\r\n    output_buffer: pointer_to_byte_array\r\nReturns: integer (0 = success, negative = error)\r\nPurpose: Load encryption coin data for key operations\r\n```\r\n\r\n#### 2.5.7 cmd_chat_get_key(connection_info)\r\n```\r\nFunction: cmd_chat_get_key\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Retrieve key for chat/communication purposes\r\n```\r\n\r\n#### 2.5.8 cmd_chat_post_key(connection_info)\r\n```\r\nFunction: cmd_chat_post_key\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Store key for chat/communication purposes\r\n```\r\n\r\n### 2.6 Locker Commands (Group 8)\r\nCoin storage and trading operations:\r\n\r\n#### 2.6.1 cmd_store_sum(connection_info)\r\n```\r\nFunction: cmd_store_sum\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Store coins in standard locker using sum validation\r\n```\r\n\r\n#### 2.6.2 cmd_store_multiple_sum(connection_info)\r\n```\r\nFunction: cmd_store_multiple_sum\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Create multiple lockers in batch operation\r\n```\r\n\r\n#### 2.6.3 cmd_peek(connection_info)\r\n```\r\nFunction: cmd_peek\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: View contents of standard locker (read-only)\r\n```\r\n\r\n#### 2.6.4 cmd_remove(connection_info)\r\n```\r\nFunction: cmd_remove\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Remove coins from standard locker\r\n```\r\n\r\n#### 2.6.5 cmd_put_for_sale(connection_info)\r\n```\r\nFunction: cmd_put_for_sale\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Create trade locker for selling coins\r\n```\r\n\r\n#### 2.6.6 cmd_list_lockers_for_sale(connection_info)\r\n```\r\nFunction: cmd_list_lockers_for_sale\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: List available trade lockers by currency type\r\n```\r\n\r\n#### 2.6.7 cmd_buy(connection_info)\r\n```\r\nFunction: cmd_buy\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Purchase trade locker with payment verification\r\n```\r\n\r\n#### 2.6.8 cmd_remove_trade_locker(connection_info)\r\n```\r\nFunction: cmd_remove_trade_locker\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Remove coins from trade locker\r\n```\r\n\r\n#### 2.6.9 cmd_peek_trade_locker(connection_info)\r\n```\r\nFunction: cmd_peek_trade_locker\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: View contents of trade locker (read-only)\r\n```\r\n\r\n### 2.7 Change Commands (Group 9)\r\nDenomination conversion operations:\r\n\r\n#### 2.7.1 cmd_get_available_change_sns(connection_info)\r\n```\r\nFunction: cmd_get_available_change_sns\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Get available serial numbers for denomination changes\r\n```\r\n\r\n#### 2.7.2 cmd_break(connection_info)\r\n```\r\nFunction: cmd_break\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Break larger denomination into smaller denominations\r\n```\r\n\r\n#### 2.7.3 cmd_join(connection_info)\r\n```\r\nFunction: cmd_join\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Combine smaller denominations into larger denomination\r\n```\r\n\r\n### 2.8 Shard Commands (Group 10)\r\nCross-shard coin management operations:\r\n\r\n#### 2.8.1 cmd_switch_shard_sum(connection_info)\r\n```\r\nFunction: cmd_switch_shard_sum\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Move coins between shards using sum validation\r\n```\r\n\r\n#### 2.8.2 cmd_pickup_coins(connection_info)\r\n```\r\nFunction: cmd_pickup_coins\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Retrieve coins from cross-shard operation\r\n```\r\n\r\n#### 2.8.3 cmd_get_sns(connection_info)\r\n```\r\nFunction: cmd_get_sns\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Get serial numbers for shard operations\r\n```\r\n\r\n#### 2.8.4 cmd_rollback_switch_shard(connection_info)\r\n```\r\nFunction: cmd_rollback_switch_shard\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Reverse shard switch operation\r\n```\r\n\r\n#### 2.8.5 cmd_switch_shard_sum_with_sns(connection_info)\r\n```\r\nFunction: cmd_switch_shard_sum_with_sns\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Move coins between shards with specific serial numbers\r\n```\r\n\r\n### 2.9 Crossover Commands (Group 11)\r\nCross-network and external integration operations:\r\n\r\n#### 2.9.1 cmd_reserve_locker(connection_info)\r\n```\r\nFunction: cmd_reserve_locker\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Reserve locker for cross-network operations\r\n```\r\n\r\n#### 2.9.2 cmd_check_depository(connection_info)\r\n```\r\nFunction: cmd_check_depository\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Check status of external depository\r\n```\r\n\r\n#### 2.9.3 cmd_withdraw_from_depository(connection_info)\r\n```\r\nFunction: cmd_withdraw_from_depository\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Withdraw funds from external depository\r\n```\r\n\r\n#### 2.9.4 cmd_trigger_transaction(connection_info)\r\n```\r\nFunction: cmd_trigger_transaction\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Initiate cross-network transaction\r\n```\r\n\r\n#### 2.9.5 cmd_get_exchange_rate(connection_info)\r\n```\r\nFunction: cmd_get_exchange_rate\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Get current exchange rates for currency conversion\r\n```\r\n\r\n### 2.10 RPC Commands (Group 12)\r\nRemote procedure call operations:\r\n\r\n#### 2.10.1 cmd_nslookup(connection_info)\r\n```\r\nFunction: cmd_nslookup\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Perform DNS lookup operations\r\n```\r\n\r\n### 2.11 Filesystem Commands (Group 13)\r\nSecure file management operations:\r\n\r\n#### 2.11.1 cmd_put_object(connection_info)\r\n```\r\nFunction: cmd_put_object\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Store file in sandboxed filesystem with authentication\r\n```\r\n\r\n#### 2.11.2 cmd_get_object(connection_info)\r\n```\r\nFunction: cmd_get_object\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Retrieve file from sandboxed filesystem with authentication\r\n```\r\n\r\n#### 2.11.3 cmd_rm_object(connection_info)\r\n```\r\nFunction: cmd_rm_object\r\nParameters: ci (pointer to connection_info_structure)\r\nReturns: void\r\nPurpose: Remove file from sandboxed filesystem with authentication\r\n```\r\n\r\n#### 2.11.4 get_crypto_key(ticker, size_output)\r\n```\r\nFunction: get_crypto_key\r\nParameters:\r\n    ticker: pointer_to_character_array (key identifier)\r\n    size_output: pointer_to_integer (for returning size)\r\nReturns: pointer_to_character_array (NULL on error)\r\nPurpose: Retrieve cryptographic key content from filesystem\r\nMemory Management: Caller must free returned buffer\r\n```\r\n\r\n## 3. Supporting Data Structures\r\n\r\n### 3.1 Coin Counter Structure\r\n```\r\ncoin_counter_structure:\r\n    coin: coin_structure                    // Coin identification\r\n    cnt: unsigned_32bit_integer            // Vote count for consensus operations\r\n```\r\n\r\n### 3.2 Validate Ticket Arguments Structure\r\n```\r\nvalidate_ticket_arg_structure:\r\n    raida_idx: signed_8bit_integer         // Target RAIDA server index\r\n    ticket: unsigned_32bit_integer         // Ticket identifier\r\n    ci: pointer_to_connection_info         // Original connection context\r\n    rv_coins: pointer_to_coin_array        // Returned coin data\r\n    rv_num_coins: unsigned_32bit_integer   // Number of returned coins\r\n```\r\n\r\n## 4. Function Implementation Requirements\r\n\r\n### 4.1 Universal Requirements\r\nAll command functions must:\r\n- Accept single connection_info parameter\r\n- Return void\r\n- Set ci->command_status to appropriate status code\r\n- Set ci->output and ci->output_size for response data\r\n- Handle all error conditions gracefully\r\n- Free allocated resources on all code paths\r\n\r\n### 4.2 Threading Requirements\r\n- **Most commands**: Execute in worker thread context\r\n- **send_validate_ticket_job**: Execute in separate thread for parallel processing\r\n- **Thread safety**: Access to shared resources must be synchronized\r\n- **Resource management**: Thread-local allocations must be cleaned up\r\n\r\n### 4.3 Memory Management\r\n- **Dynamic allocation**: Use malloc/free for variable-size responses\r\n- **Error cleanup**: Free all allocated memory on error paths\r\n- **Output buffers**: Allocated by command handlers, freed by protocol layer\r\n- **Input validation**: Validate all input before allocation\r\n\r\n## 5. Integration Requirements\r\n\r\n### 5.1 Protocol Layer Integration\r\nAll commands must integrate with:\r\n- **Connection Info**: Access to request body, response output, status codes\r\n- **Protocol Functions**: get_body_payload(), status code constants\r\n- **Error Handling**: Standard error response mechanism\r\n- **Encryption**: Support for encrypted request/response handling\r\n\r\n### 5.2 Database Layer Integration\r\nCommands requiring database access must use:\r\n- **Page Management**: get_page_by_sn_lock(), unlock_page()\r\n- **Dirty Queue**: add_page_to_dirty_queue() for persistence\r\n- **Index Operations**: Locker index functions for coin storage\r\n- **Transaction Safety**: Proper locking and error handling\r\n\r\n### 5.3 Network Layer Integration\r\nCommands requiring external communication must use:\r\n- **Socket Operations**: Standard socket API for RAIDA communication\r\n- **Timeout Handling**: Appropriate timeout values for network operations\r\n- **Error Recovery**: Graceful handling of network failures\r\n- **Resource Cleanup**: Proper socket and connection cleanup\r\n\r\n## 6. Security Requirements\r\n\r\n### 6.1 Input Validation\r\nAll commands must validate:\r\n- **Request size**: Minimum and expected size validation\r\n- **Parameter bounds**: All numeric parameters within valid ranges\r\n- **Buffer sizes**: Prevent buffer overflows and excessive allocations\r\n- **Authentication**: Admin keys and authorization where required\r\n\r\n### 6.2 Authentication and Authorization\r\nCommands requiring elevated access must:\r\n- **Admin Authentication**: Validate admin keys for privileged operations\r\n- **Coin Ownership**: Verify coin ownership before modifications\r\n- **Access Control**: Enforce appropriate access restrictions\r\n- **Error Responses**: Use generic errors to prevent information disclosure\r\n\r\n### 6.3 Resource Protection\r\nAll commands must implement:\r\n- **Memory Limits**: Prevent excessive memory allocation\r\n- **File System**: Sandbox enforcement for filesystem operations\r\n- **Network Limits**: Reasonable timeouts and connection limits\r\n- **Database Protection**: Proper locking and transaction handling\r\n\r\n## 7. Error Handling Standards\r\n\r\n### 7.1 Status Code Usage\r\nCommands must use appropriate status codes:\r\n- **SUCCESS**: STATUS_SUCCESS, STATUS_ALL_PASS, STATUS_ALL_FAIL, STATUS_MIXED\r\n- **Validation Errors**: ERROR_INVALID_PACKET_LENGTH, ERROR_INVALID_PARAMETER\r\n- **Authentication Errors**: ERROR_ADMIN_AUTH, ERROR_INVALID_ENCRYPTION\r\n- **System Errors**: ERROR_MEMORY_ALLOC, ERROR_INTERNAL, ERROR_FILESYSTEM\r\n\r\n### 7.2 Error Response Requirements\r\n- **Status Setting**: Always set ci->command_status appropriately\r\n- **Resource Cleanup**: Free all allocated resources on error paths\r\n- **Logging**: Log errors with appropriate context and detail level\r\n- **Information Security**: Avoid revealing sensitive information in errors\r\n\r\nThis specification provides the complete command interface definition needed to implement all CloudCoin RAIDA command handlers while remaining language-agnostic and accurately reflecting the comprehensive command system architecture."
        }
    ]
}