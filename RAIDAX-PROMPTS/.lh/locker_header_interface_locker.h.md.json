{
    "sourceFile": "locker_header_interface_locker.h.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1751960413453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1751960413453,
            "name": "Commit-0",
            "content": "# Language-Agnostic Specification: Locker Header Interface\r\n\r\n## 1. Module Purpose\r\nThis specification defines the public interface for the CloudCoin locker system. It establishes the data structures, constants, and function signatures required to implement an in-memory index system for both standard coin lockers and trade lockers with thread-safe incremental updates.\r\n\r\n## 2. System Constants\r\n\r\n### 2.1 Index Configuration\r\n```\r\nMAX_LOCKER_RECORDS = 100000      // Maximum locker records in index\r\nINDEX_UPDATE_PERIOD = 3600       // Legacy constant (no longer used for periodic rebuilds)\r\nPREALLOCATE_COINS = 2           // Initial allocation size for coins array\r\n```\r\n\r\n### 2.2 Trade Sale Types\r\n```\r\nSALE_TYPE_CC = 0x0              // CloudCoin trade type\r\nSALE_TYPE_BTC = 0x1             // Bitcoin trade type\r\nSALE_TYPE_XMR = 0x2             // Monero trade type\r\n```\r\n\r\n## 3. Core Data Structures\r\n\r\n### 3.1 Index Entry Structure\r\nThe index entry structure represents a single locker and must contain:\r\n\r\n```\r\nindex_entry_structure:\r\n    an: byte_array[16]                    // Authenticity Number (locker identifier)\r\n    num_coins: integer                    // Number of coins in the locker\r\n    coins: pointer_to_coin_array          // Dynamic array of coin structures\r\n```\r\n\r\n### 3.2 Coin Structure Dependency\r\nThe locker system depends on the coin structure from the protocol layer:\r\n```\r\ncoin_structure:\r\n    denomination: signed_8bit_integer     // Coin denomination\r\n    sn: unsigned_32bit_integer           // Serial number\r\n```\r\n\r\n## 4. Public Function Interface\r\n\r\n### 4.1 Initialization Functions\r\n\r\n#### 4.1.1 init_locker_index()\r\n```\r\nFunction: init_locker_index\r\nParameters: none\r\nReturns: integer (0 = success, negative = error)\r\nPurpose: Initialize the locker index system at server startup\r\n```\r\n\r\n#### 4.1.2 build_initial_locker_indices()\r\n```\r\nFunction: build_initial_locker_indices\r\nParameters: none\r\nReturns: void\r\nPurpose: Perform one-time build of indices from database\r\n```\r\n\r\n### 4.2 Standard Locker Index Functions\r\n\r\n#### 4.2.1 locker_index_add_coins(an, coins_to_add, num_coins)\r\n```\r\nFunction: locker_index_add_coins\r\nParameters:\r\n    an: pointer_to_byte_array (16-byte locker identifier)\r\n    coins_to_add: pointer_to_coin_array\r\n    num_coins: integer (number of coins to add)\r\nReturns: void\r\nPurpose: Add coins to a standard locker index entry\r\nThread Safety: Thread-safe\r\n```\r\n\r\n#### 4.2.2 locker_index_remove_coins(an, coins_to_remove, num_coins)\r\n```\r\nFunction: locker_index_remove_coins\r\nParameters:\r\n    an: pointer_to_byte_array (16-byte locker identifier)\r\n    coins_to_remove: pointer_to_coin_array\r\n    num_coins: integer (number of coins to remove)\r\nReturns: void\r\nPurpose: Remove coins from a standard locker index entry\r\nThread Safety: Thread-safe\r\n```\r\n\r\n### 4.3 Trade Locker Index Functions\r\n\r\n#### 4.3.1 trade_locker_index_add_coins(an, coins_to_add, num_coins)\r\n```\r\nFunction: trade_locker_index_add_coins\r\nParameters:\r\n    an: pointer_to_byte_array (16-byte locker identifier)\r\n    coins_to_add: pointer_to_coin_array\r\n    num_coins: integer (number of coins to add)\r\nReturns: void\r\nPurpose: Add coins to a trade locker index entry\r\nThread Safety: Thread-safe\r\n```\r\n\r\n#### 4.3.2 trade_locker_index_remove_coins(an, coins_to_remove, num_coins)\r\n```\r\nFunction: trade_locker_index_remove_coins\r\nParameters:\r\n    an: pointer_to_byte_array (16-byte locker identifier)\r\n    coins_to_remove: pointer_to_coin_array\r\n    num_coins: integer (number of coins to remove)\r\nReturns: void\r\nPurpose: Remove coins from a trade locker index entry\r\nThread Safety: Thread-safe\r\n```\r\n\r\n### 4.4 Index Cleanup Functions\r\n\r\n#### 4.4.1 free_index()\r\n```\r\nFunction: free_index\r\nParameters: none\r\nReturns: void\r\nPurpose: Free all resources used by standard locker index\r\n```\r\n\r\n#### 4.4.2 free_trade_index()\r\n```\r\nFunction: free_trade_index\r\nParameters: none\r\nReturns: void\r\nPurpose: Free all resources used by trade locker index\r\n```\r\n\r\n#### 4.4.3 show_index()\r\n```\r\nFunction: show_index\r\nParameters: none\r\nReturns: void\r\nPurpose: Display debug information about standard locker index\r\n```\r\n\r\n#### 4.4.4 show_trade_index()\r\n```\r\nFunction: show_trade_index\r\nParameters: none\r\nReturns: void\r\nPurpose: Display debug information about trade locker index\r\n```\r\n\r\n### 4.5 Query Functions\r\n\r\n#### 4.5.1 get_coins_from_index(an)\r\n```\r\nFunction: get_coins_from_index\r\nParameters: an (pointer_to_byte_array - 16-byte locker identifier)\r\nReturns: pointer_to_index_entry_structure (NULL if not found)\r\nPurpose: Retrieve standard locker entry by full AN\r\nThread Safety: Thread-safe\r\n```\r\n\r\n#### 4.5.2 get_coins_from_index_by_prefix(an_prefix)\r\n```\r\nFunction: get_coins_from_index_by_prefix\r\nParameters: an_prefix (pointer_to_byte_array - partial locker identifier)\r\nReturns: pointer_to_index_entry_structure (NULL if not found)\r\nPurpose: Retrieve standard locker entry by AN prefix (first 5 bytes)\r\nThread Safety: Thread-safe\r\n```\r\n\r\n#### 4.5.3 get_coins_from_trade_index(an)\r\n```\r\nFunction: get_coins_from_trade_index\r\nParameters: an (pointer_to_byte_array - 16-byte locker identifier)\r\nReturns: pointer_to_index_entry_structure (NULL if not found)\r\nPurpose: Retrieve trade locker entry by full AN\r\nThread Safety: Thread-safe\r\n```\r\n\r\n#### 4.5.4 load_coins_from_trade_index(coin_type, max_results, output_array)\r\n```\r\nFunction: load_coins_from_trade_index\r\nParameters:\r\n    coin_type: unsigned_8bit_integer (trade currency type)\r\n    max_results: unsigned_8bit_integer (maximum entries to return)\r\n    output_array: pointer_to_pointer_to_index_entry_structure\r\nReturns: integer (actual number of entries found)\r\nPurpose: Get multiple trade locker entries of specified type\r\nThread Safety: Thread-safe\r\n```\r\n\r\n#### 4.5.5 get_entry_from_trade_index(coin_type, amount, price)\r\n```\r\nFunction: get_entry_from_trade_index\r\nParameters:\r\n    coin_type: unsigned_8bit_integer (trade currency type)\r\n    amount: unsigned_64bit_integer (total value)\r\n    price: unsigned_32bit_integer (price per unit)\r\nReturns: pointer_to_index_entry_structure (NULL if not found)\r\nPurpose: Find specific trade locker by criteria\r\nThread Safety: Thread-safe\r\n```\r\n\r\n### 4.6 Utility Functions\r\n\r\n#### 4.6.1 is_good_trade_coin_type(coin_type)\r\n```\r\nFunction: is_good_trade_coin_type\r\nParameters: coin_type (unsigned_8bit_integer)\r\nReturns: integer (non-zero if valid, 0 if invalid)\r\nPurpose: Validate trade currency type\r\n```\r\n\r\n#### 4.6.2 calc_coins_in_trade_locker(index_entry)\r\n```\r\nFunction: calc_coins_in_trade_locker\r\nParameters: index_entry (pointer_to_index_entry_structure)\r\nReturns: unsigned_64bit_integer (total value)\r\nPurpose: Calculate total value of coins in trade locker\r\n```\r\n\r\n## 5. Data Structure Requirements\r\n\r\n### 5.1 Index Entry Memory Layout\r\n- **an field**: 16 consecutive bytes storing locker identifier\r\n- **num_coins field**: Integer tracking current coin count\r\n- **coins field**: Pointer to dynamically allocated coin array\r\n\r\n### 5.2 Dynamic Memory Management\r\n- Coin arrays must be dynamically allocated and resizable\r\n- Initial allocation should use PREALLOCATE_COINS constant\r\n- Memory must be freed when index entries are removed\r\n- Reallocation should occur in chunks for efficiency\r\n\r\n## 6. Thread Safety Requirements\r\n\r\n### 6.1 Concurrent Access Protection\r\n- All public functions must be thread-safe\r\n- Internal synchronization must protect both indices independently\r\n- Query functions must return stable references during concurrent modifications\r\n- Add/remove operations must be atomic per function call\r\n\r\n### 6.2 Index Separation\r\n- Standard locker index and trade locker index must use separate synchronization\r\n- Concurrent operations on different index types should not block each other\r\n- Lock granularity should allow maximum concurrency\r\n\r\n## 7. Integration Dependencies\r\n\r\n### 7.1 Protocol Layer Integration\r\n```\r\nRequired from protocol.h:\r\n    coin_t structure definition\r\n    Basic coin type definitions\r\n```\r\n\r\n### 7.2 Memory Management Requirements\r\n- All dynamic allocations must be tracked and freed appropriately\r\n- Index entries must handle memory allocation failures gracefully\r\n- Partial operations must clean up allocated resources on failure\r\n\r\n## 8. Trade System Specifications\r\n\r\n### 8.1 Trade Type Validation\r\n- Only SALE_TYPE_CC, SALE_TYPE_BTC, and SALE_TYPE_XMR are valid\r\n- Trade type validation must occur before index operations\r\n- Invalid trade types must be rejected with appropriate error handling\r\n\r\n### 8.2 Trade Locker Identification\r\n- Trade lockers identified by specific AN format patterns\r\n- AN bytes 14-15 must be 0xEE 0xEE for trade lockers\r\n- Standard lockers identified by AN bytes 12-15 being 0xFF 0xFF 0xFF 0xFF\r\n\r\n## 9. Performance Considerations\r\n\r\n### 9.1 Search Efficiency\r\n- Index lookups should be optimized for the MAX_LOCKER_RECORDS limit\r\n- Prefix matching should be efficient for encryption key lookups\r\n- Trade locker filtering by type should minimize full index scans\r\n\r\n### 9.2 Memory Efficiency\r\n- Coin array preallocation should balance memory usage and reallocation overhead\r\n- Index entries should be packed efficiently in memory\r\n- Unused index slots should not consume excessive memory\r\n\r\n## 10. Error Handling Standards\r\n\r\n### 10.1 Function Return Conventions\r\n- Query functions return NULL for not found conditions\r\n- Integer return functions use 0 for success, negative for errors\r\n- Utility functions return appropriate typed values with error indicators\r\n\r\n### 10.2 Resource Cleanup\r\n- All functions must clean up resources on error paths\r\n- Partial index updates must not leave indices in inconsistent state\r\n- Memory leaks must be prevented on all error conditions\r\n\r\n\r\nThis specification provides the complete interface definition needed to implement the CloudCoin locker index system while remaining language-agnostic and accurately reflecting the actual header requirements."
        }
    ]
}